package edu.grinnell.csc207.soundsofsorting;

import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;
import java.util.Arrays;

import org.junit.jupiter.api.Test;

import edu.grinnell.csc207.soundsofsorting.sortevents.CompareEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.SortEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.SwapEvent;
import edu.grinnell.csc207.soundsofsorting.sorts.Sorts;

public class SortsTests {
    /**
     * @param <T> the carrier type of the array
     * @param arr the array to check
     * @return true iff <code>arr</code> is sorted.
     */
    public static <T extends Comparable<? super T>> boolean sorted(T[] arr) {
        for (int i = 0; i < arr.length - 1; i++) {
            if (arr[i].compareTo(arr[i + 1]) > 0) {
                return false;
            }
        }
        return true;
    }

    public static <T extends Comparable<? super T>> boolean listed(T[] arr) {
        for (int i = 0; i < arr.length - 1; i++) {
            if (arr[i].compareTo(arr[i + 1]) > 0) {
                return false;
            }
        }
        return true;
    }

    public static Integer[] makeTestArray() {
        return new Integer[] {
            3, 7, 9, 1, 2,
            18, 16, 15, 19, 8,
            14, 12, 5, 13, 4,
            6, 0, 17, 11, 10
        };
    }

    public static Integer[] makeSmallArray() {
        return new Integer[] {
            3, 7, 11, 10
        };
    }

    public void testSort(Consumer<Integer[]> func) {
        Integer[] arr = makeTestArray();
        func.accept(arr);
        assertTrue(sorted(arr));
    }

    @Test
    public void testBubbleSort() {
        testSort(Sorts::bubbleSort);
    }
    
    @Test
    public void testInsertionSort() {
        testSort(Sorts::insertionSort);
    }
    
    @Test
    public void testSelectionSort() {
        testSort(Sorts::selectionSort);
    }

    @Test
    public void testMergeSort() {
        testSort(Sorts::mergeSort);
    }
    
    @Test
    public void testQuickSort() {
        testSort(Sorts::quickSort);
        
        List<SortEvent<Integer>> l = new ArrayList<SortEvent<Integer>>();
        Integer[] arr = makeSmallArray();
        Integer[] arr2 = makeSmallArray();

        l = quickSort(arr);
        eventSort(arr2, l);
    }

    private void eventSort(Integer[] arr, List<SortEvent<Integer>> l) {
        while (!l.isEmpty()) {
            l.remove(0).apply(arr);
        }
        assertTrue(sorted(arr));
    }

     /**
     * Sorts the array according to the quick sort algorithm.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> quickSort(T[] arr) {
        List<SortEvent<Integer>> l = new ArrayList<SortEvent<Integer>>();
        quickSortHelper(arr, 0, arr.length - 1, l);
        return l;
    }

    /**
     * 
     * @param <T>
     * @param arr
     * @param hi exclusive
     * @param lo inclusive
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> quickSortHelper(T[] arr, int lo, int hi, 
                                                                                             List<SortEvent<Integer>> l) {
        int pivot = hi;
        int pointerLo = lo;
        int pointerHi = hi - 1;
        boolean cont = true;
        l.add(new CompareEvent(lo, hi));
        if(lo >= hi - 1) {
            return l;
        } else {
            while (cont) {
                while (arr[pointerLo].compareTo(arr[pivot]) < 0 && pointerHi != pointerLo) {
                    l.add(new CompareEvent(pointerLo, pivot));
                    l.add(new CompareEvent(pointerHi, pointerLo));
                    pointerLo++;
                }
                while (arr[pointerHi].compareTo(arr[pivot]) >= 0 && pointerHi != pointerLo) {
                    l.add(new CompareEvent(pointerHi, pivot));
                    l.add(new CompareEvent(pointerHi, pointerLo));
                    pointerHi--;
                } 

                if (pointerHi == pointerLo) {
                    l.add(new CompareEvent(pointerHi, pointerLo));
                    if (arr[pointerLo].compareTo(arr[hi]) >= 0) {
                        l.add(new CompareEvent(pointerLo, hi));
                        swap(arr, pointerLo, hi);
                        l.add(new SwapEvent(pointerLo, hi));
                    }
                    cont = false;
                } else {
                    swap(arr, pointerLo, pointerHi);
                    l.add(new SwapEvent(pointerLo, pointerHi));
                }
            }
            quickSortHelper(arr, pointerHi, hi, l); //changed 1st arg from arr.
            quickSortHelper(arr, lo, pointerHi, l);
            return l;
        }
    }

     /**
     * Swaps indices <code>i</code> and <code>j</code> of array <code>arr</code>.
     * @param <T> the carrier type of the array
     * @param arr the array to swap
     * @param i the first index to swap
     * @param j the second index to swap
     */
    public static <T> void swap(T[] arr, int i, int j) {
        T tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

}